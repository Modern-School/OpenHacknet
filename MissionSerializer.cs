using System;
using System.Text;

namespace Hacknet
{
	// Token: 0x020000D4 RID: 212
	public static class MissionSerializer
	{
		// Token: 0x06000443 RID: 1091 RVA: 0x00044CDC File Offset: 0x00042EDC
		public static string generateMissionFile(object mission_obj, int contractRegistryNumber = 0, string GroupName = "CSEC", string Tag = null)
		{
			ActiveMission activeMission = (ActiveMission)mission_obj;
			string text = GroupName + " Contract #" + contractRegistryNumber;
			text += "\n--------------------------------------------  #%#\n";
			text = text + "Code = " + MissionSerializer.encodeString(activeMission.reloadGoalsSourceFile) + "\n  #%#\n";
			text = text + "Client = " + activeMission.client + "  #%#\n";
			text = text + "Target = " + activeMission.target + "  #%#\n";
			object obj = text;
			text = string.Concat(new object[]
			{
				obj,
				"RequiredRank = ",
				activeMission.requiredRank,
				"  #%#\n"
			});
			obj = text;
			text = string.Concat(new object[]
			{
				obj,
				"Difficulty = ",
				activeMission.difficulty,
				"\n  #%#\n"
			});
			text = text + "Title = " + activeMission.postingTitle + "  #%#\n";
			text = text + "Posting = " + activeMission.postingBody + "\n  #%#\n";
			text = text + "E_TargetTrack = " + MissionSerializer.encodeString(activeMission.genTarget) + "  #%#\n";
			text = text + "E_TargetTaskData = " + MissionSerializer.encodeString(activeMission.genFile) + "  #%#\n";
			text = text + "E_TargetTaskTrack = " + MissionSerializer.encodeString(activeMission.genPath) + "  #%#\n";
			text = text + "E2_TargetTaskTrack_1 = " + MissionSerializer.encodeString(activeMission.genTargetName) + "  #%#\n";
			text = text + "E3_TargetTaskTrack_2 = " + MissionSerializer.encodeString(activeMission.genOther) + "  #%#\n";
			text = text + "E3_TargetTaskTrack_3 = " + (activeMission.wasAutoGenerated ? "gen" : "cmd") + "  #%#\n";
			obj = text;
			text = string.Concat(new object[]
			{
				obj,
				"E4_ContractReg = ",
				contractRegistryNumber,
				"  #%#\n"
			});
			if (Tag != null)
			{
				text = text + "Tag = " + Tag + "  #%#\n";
			}
			return text;
		}

		// Token: 0x06000444 RID: 1092 RVA: 0x00044F00 File Offset: 0x00043100
		public static object restoreMissionFromFile(string data, out int contractRegistryNumber)
		{
			string text = null;
			return MissionSerializer.restoreMissionFromFile(data, out contractRegistryNumber, out text);
		}

		// Token: 0x06000445 RID: 1093 RVA: 0x00044F20 File Offset: 0x00043120
		public static object restoreMissionFromFile(string data, out int contractRegistryNumber, out string Tag)
		{
			string[] separator = new string[]
			{
				"  #%#\n"
			};
			string[] array = data.Split(separator, StringSplitOptions.RemoveEmptyEntries);
			string genOther;
			string genTargetName;
			string text3;
			string text2;
			string text;
			string target;
			string filename;
			string client = filename = (target = (text = (text2 = (text3 = (genTargetName = (genOther = "unknown"))))));
			bool wasAutoGenerated = false;
			int requiredRank;
			int difficulty = requiredRank = 0;
			contractRegistryNumber = 1;
			Tag = null;
			for (int i = 0; i < array.Length; i++)
			{
				if (!array[i].StartsWith("//"))
				{
					string text4 = array[i];
					if (text4.StartsWith("Code"))
					{
						filename = MissionSerializer.decodeString(MissionSerializer.getDataFromConfigLine(text4, "= "));
					}
					else if (text4.StartsWith("Client"))
					{
						client = MissionSerializer.getDataFromConfigLine(text4, "= ");
					}
					else if (text4.StartsWith("Target"))
					{
						target = MissionSerializer.getDataFromConfigLine(text4, "= ");
					}
					else if (text4.StartsWith("E_TargetTrack"))
					{
						text = MissionSerializer.decodeString(MissionSerializer.getDataFromConfigLine(text4, "= "));
					}
					else if (text4.StartsWith("E_TargetTaskData"))
					{
						text2 = MissionSerializer.decodeString(MissionSerializer.getDataFromConfigLine(text4, "= "));
					}
					else if (text4.StartsWith("E_TargetTaskTrack"))
					{
						text3 = MissionSerializer.decodeString(MissionSerializer.getDataFromConfigLine(text4, "= "));
					}
					else if (text4.StartsWith("E2_TargetTaskTrack_1"))
					{
						genTargetName = MissionSerializer.decodeString(MissionSerializer.getDataFromConfigLine(text4, "= "));
					}
					else if (text4.StartsWith("E3_TargetTaskTrack_2"))
					{
						genOther = MissionSerializer.decodeString(MissionSerializer.getDataFromConfigLine(text4, "= "));
					}
					else if (text4.StartsWith("E3_TargetTaskTrack_3"))
					{
						wasAutoGenerated = (MissionSerializer.getDataFromConfigLine(text4, "= ") == "gen");
					}
					else if (text4.StartsWith("Tag"))
					{
						Tag = MissionSerializer.getDataFromConfigLine(text4, "= ");
					}
					else if (text4.StartsWith("E4_ContractReg"))
					{
						try
						{
							contractRegistryNumber = Convert.ToInt32(MissionSerializer.getDataFromConfigLine(text4, "= "));
						}
						catch (FormatException)
						{
							contractRegistryNumber = 0;
						}
						catch (OverflowException)
						{
							contractRegistryNumber = 0;
						}
					}
					else if (text4.StartsWith("Rank"))
					{
						try
						{
							requiredRank = Convert.ToInt32(MissionSerializer.getDataFromConfigLine(text4, "= "));
						}
						catch (FormatException)
						{
							contractRegistryNumber = 0;
						}
						catch (OverflowException)
						{
							contractRegistryNumber = 0;
						}
					}
					else if (text4.StartsWith("Difficulty"))
					{
						try
						{
							difficulty = Convert.ToInt32(MissionSerializer.getDataFromConfigLine(text4, "= "));
						}
						catch (FormatException)
						{
							contractRegistryNumber = 0;
						}
						catch (OverflowException)
						{
							contractRegistryNumber = 0;
						}
					}
				}
			}
			MissionGenerationParser.Client = client;
			MissionGenerationParser.Comp = text;
			MissionGenerationParser.File = text2;
			MissionGenerationParser.Path = text3;
			ActiveMission activeMission = (ActiveMission)ComputerLoader.readMission(filename);
			activeMission.genFile = text2;
			activeMission.genPath = text3;
			activeMission.genTarget = text;
			activeMission.genTargetName = genTargetName;
			activeMission.genOther = genOther;
			activeMission.target = target;
			activeMission.client = client;
			activeMission.requiredRank = requiredRank;
			activeMission.difficulty = difficulty;
			activeMission.wasAutoGenerated = wasAutoGenerated;
			return activeMission;
		}

		// Token: 0x06000446 RID: 1094 RVA: 0x00045310 File Offset: 0x00043510
		private static string encodeString(string s)
		{
			string text = "";
			if (s != null)
			{
				for (int i = 0; i < s.Length; i++)
				{
					text = text + (int)s[i] + " ";
				}
			}
			return text.Trim();
		}

		// Token: 0x06000447 RID: 1095 RVA: 0x00045368 File Offset: 0x00043568
		private static string decodeString(string s)
		{
			char[] separator = new char[]
			{
				' '
			};
			string[] array = s.Split(separator, StringSplitOptions.RemoveEmptyEntries);
			StringBuilder stringBuilder = new StringBuilder();
			for (int i = 0; i < array.Length; i++)
			{
				stringBuilder.Append(Convert.ToChar(Convert.ToInt32(array[i])));
			}
			return stringBuilder.ToString();
		}

		// Token: 0x06000448 RID: 1096 RVA: 0x000453CC File Offset: 0x000435CC
		private static string getDataFromConfigLine(string line, string sentinel = "= ")
		{
			return line.Substring(line.IndexOf(sentinel) + 2);
		}

		// Token: 0x04000527 RID: 1319
		public const string MISSION_FILE_DELIMITER = "  #%#\n";
	}
}
