using System;
using System.Collections.Generic;
using System.IO;
using Microsoft.Xna.Framework.Content;

namespace Hacknet
{
	// Token: 0x02000137 RID: 311
	public static class MissionGenerator
	{
		// Token: 0x06000773 RID: 1907 RVA: 0x0007AD80 File Offset: 0x00078F80
		public static void init(ContentManager contentManager)
		{
			MissionGenerator.content = contentManager;
			MissionGenerator.MissionLists = new List<List<string>>();
			for (int i = 0; i < 2; i++)
			{
				string path;
				switch (i)
				{
				case 0:
					path = Path.Combine("Missions", "Generated", "FileDeletion");
					break;
				case 1:
					path = Path.Combine("Missions", "Generated", "WebsiteChange");
					break;
				default:
					path = null;
					break;
				}
				MissionGenerator.MissionLists.Add(new List<string>());
				DirectoryInfo directoryInfo = new DirectoryInfo(Path.Combine(MissionGenerator.content.RootDirectory, path));
				FileInfo[] files = directoryInfo.GetFiles("*.*");
				for (int j = 0; j < files.Length; j++)
				{
					MissionGenerator.MissionLists[i].Add(Path.Combine("Content", path, Path.GetFileName(files[j].Name)));
				}
			}
		}

		// Token: 0x06000774 RID: 1908 RVA: 0x0007AF10 File Offset: 0x00079110
		public static object generate(int secutiryLevel)
		{
			int type = 0;
			if (secutiryLevel <= 3)
			{
				type = 0;
			}
			else
			{
				type = 0;
				if (Utils.flipCoin())
				{
					type = 1;
				}
			}
			int index = (int)((double)(MissionGenerator.MissionLists[type].Count - 1) * Utils.random.NextDouble() + 0.5);
			string filename = MissionGenerator.MissionLists[type][index];
			MissionGenerator.customKeysWereSet = false;
			MissionGenerationParser.Client = NameGenerator.generateName();
			MissionGenerationParser.Other = "Unknown";
			MissionGenerationParser.Target = NameGenerator.generateName();
			ComputerLoader.MissionPreLoadComplete = (Action)Delegate.Combine(ComputerLoader.MissionPreLoadComplete, new Action(delegate()
			{
				Computer computer = (Computer)MissionGenerator.generateComputer(secutiryLevel, MissionGenerationParser.Target);
				switch (type)
				{
				default:
					computer = MissionGenerator.addFileDeletionRequirements(computer, OS.currentInstance);
					break;
				case 1:
					computer = MissionGenerator.addWebsiteChangeRequirements(computer, OS.currentInstance);
					break;
				}
				computer.idName = "Gen" + MissionGenerator.generationCount;
				MissionGenerationParser.Comp = computer.idName;
				OS.currentInstance.netMap.nodes.Add(computer);
			}));
			ActiveMission activeMission = (ActiveMission)ComputerLoader.readMission(filename);
			ComputerLoader.MissionPreLoadComplete = null;
			activeMission.wasAutoGenerated = true;
			activeMission.genTarget = MissionGenerationParser.Comp;
			activeMission.genPath = MissionGenerationParser.Path;
			activeMission.genFile = MissionGenerationParser.File;
			activeMission.client = MissionGenerationParser.Client;
			activeMission.genTargetName = MissionGenerationParser.Target;
			activeMission.genOther = MissionGenerationParser.Other;
			MissionGenerator.generationCount++;
			return activeMission;
		}

		// Token: 0x06000775 RID: 1909 RVA: 0x0007B064 File Offset: 0x00079264
		public static object generateComputer(int secLevel, string name = null)
		{
			if (name == null)
			{
				name = NameGenerator.generateName();
			}
			Computer computer = new Computer(name, NetworkMap.generateRandomIP(), OS.currentInstance.netMap.getRandomPosition(), secLevel, 2, OS.currentInstance);
			if (computer.traceTime <= 0f)
			{
				computer.traceTime = 10f * Computer.BASE_TRACE_TIME;
			}
			return computer;
		}

		// Token: 0x06000776 RID: 1910 RVA: 0x0007B0D0 File Offset: 0x000792D0
		public static void setMissionGenerationKeys(Dictionary<string, string> keys)
		{
			if (keys.ContainsKey("File"))
			{
				MissionGenerationParser.File = MissionGenerationParser.parse(keys["File"]);
			}
			else
			{
				MissionGenerationParser.File = null;
			}
			if (keys.ContainsKey("Data"))
			{
				MissionGenerator.customFileData = MissionGenerationParser.parse(keys["Data"]);
			}
			else
			{
				MissionGenerator.customFileData = null;
			}
			if (keys.ContainsKey("Path"))
			{
				MissionGenerationParser.Path = MissionGenerationParser.parse(keys["Path"]);
			}
			else
			{
				MissionGenerationParser.Path = null;
			}
			if (keys.ContainsKey("Client"))
			{
				MissionGenerationParser.Client = keys["Client"];
			}
			if (keys.ContainsKey("Comp"))
			{
				MissionGenerationParser.Comp = keys["Comp"];
			}
			MissionGenerator.customKeysWereSet = true;
		}

		// Token: 0x06000777 RID: 1911 RVA: 0x0007B1C0 File Offset: 0x000793C0
		private static Computer addFileDeletionRequirements(Computer c, OS os)
		{
			string text = "Archive_Data.zip";
			if (MissionGenerator.customKeysWereSet && MissionGenerationParser.File != null)
			{
				text = MissionGenerationParser.File;
			}
			string dataEntry = (MissionGenerator.customFileData != null) ? MissionGenerator.customFileData : Computer.generateBinaryString(2000);
			FileEntry item = new FileEntry(dataEntry, text);
			Folder folder = c.files.root.folders[0];
			if (MissionGenerator.customKeysWereSet && MissionGenerationParser.Path != null)
			{
				folder = c.getFolderFromPath(MissionGenerationParser.Path, true);
			}
			folder.files.Add(item);
			MissionGenerationParser.File = text;
			if (!MissionGenerator.customKeysWereSet && MissionGenerationParser.Path != null)
			{
				MissionGenerationParser.Path = "home";
			}
			return c;
		}

		// Token: 0x06000778 RID: 1912 RVA: 0x0007B294 File Offset: 0x00079494
		private static Computer addWebsiteChangeRequirements(Computer c, OS os)
		{
			WebServerDaemon webServerDaemon = new WebServerDaemon(c, MissionGenerationParser.Target + " Web Server", os, "Content/Web/BaseImageWebPage.html");
			c.daemons.Add(webServerDaemon);
			c.initDaemons();
			if (MissionGenerator.customKeysWereSet && MissionGenerator.customFileData != null)
			{
				webServerDaemon.generateBaseCorporateSite(MissionGenerationParser.Target, MissionGenerator.customFileData);
			}
			else
			{
				webServerDaemon.generateBaseCorporateSite(MissionGenerationParser.Target, "Content/Web/BaseCorporatePage.html");
			}
			MissionGenerationParser.File = "index.html";
			MissionGenerationParser.Path = "web";
			return c;
		}

		// Token: 0x0400085E RID: 2142
		private const int FILE_DELETION = 0;

		// Token: 0x0400085F RID: 2143
		private const int WEBSITE_CHANGE = 1;

		// Token: 0x04000860 RID: 2144
		private const int TYPES_OF_GENERATED_MISSIONS = 2;

		// Token: 0x04000861 RID: 2145
		private static ContentManager content;

		// Token: 0x04000862 RID: 2146
		public static int generationCount = 0;

		// Token: 0x04000863 RID: 2147
		private static List<List<string>> MissionLists;

		// Token: 0x04000864 RID: 2148
		private static bool customKeysWereSet = false;

		// Token: 0x04000865 RID: 2149
		private static string customFileData = null;
	}
}
