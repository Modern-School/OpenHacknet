using System;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;

namespace Hacknet
{
	// Token: 0x020000D8 RID: 216
	internal class SQLExploitExe : ExeModule
	{
		// Token: 0x06000453 RID: 1107 RVA: 0x00045788 File Offset: 0x00043988
		public SQLExploitExe(Rectangle location, OS operatingSystem) : base(location, operatingSystem)
		{
			this.name = "SQLMemoryCorrupter";
			this.IdentifierName = "SQL Memory Corruption Injector";
			this.ramCost = 350;
		}

		// Token: 0x06000454 RID: 1108 RVA: 0x000457EC File Offset: 0x000439EC
		public override void LoadContent()
		{
			base.LoadContent();
			this.bodyText = Utils.readEntireFile("Content/EffectFiles/SQLMemoryCorruptionDump.txt").Split(Utils.newlineDelim);
			int length = "Initializing###.#.#.#\nConnecting###.#.#.#.#.#.#.#.#..#.\nInjecting Corrupt Sectors###.#.#.##.#.#.#".Replace("#", "@@").Length;
			this.initStringCharDelay = 3f / (float)length;
			this.flashColor = this.os.lockedColor;
			this.flashColor.A = 0;
			this.brightDrawColor = this.os.unlockedColor;
			this.brightDrawColor.A = 0;
			Computer computer = Programs.getComputer(this.os, this.targetIP);
			computer.hostileActionTaken();
		}

		// Token: 0x06000455 RID: 1109 RVA: 0x00045898 File Offset: 0x00043A98
		public override void Update(float t)
		{
			base.Update(t);
			this.timeTaken += t;
			this.currentStateTimer += t;
			SQLExploitExe.SQLState sqlstate = this.state;
			this.updateState();
			if (this.state != sqlstate)
			{
				this.currentStateTimer = 0f;
			}
		}

		// Token: 0x06000456 RID: 1110 RVA: 0x000458F4 File Offset: 0x00043AF4
		private void updateState()
		{
			float num = this.timeTaken;
			num -= 3f;
			if (num <= 0f)
			{
				this.state = SQLExploitExe.SQLState.Intro;
			}
			else
			{
				num -= 3f;
				if (num <= 0f)
				{
					this.state = SQLExploitExe.SQLState.MainIntro;
				}
				else
				{
					num -= 5f;
					if (num <= 0f)
					{
						this.state = SQLExploitExe.SQLState.MainBody;
					}
					else
					{
						num -= 1.2f;
						if (num <= 0f)
						{
							this.state = SQLExploitExe.SQLState.Ending;
						}
						else if (!this.isExiting)
						{
							this.Completed();
							this.isExiting = true;
						}
					}
				}
			}
		}

		// Token: 0x06000457 RID: 1111 RVA: 0x000459A0 File Offset: 0x00043BA0
		public override void Draw(float t)
		{
			base.Draw(t);
			Rectangle dest = Rectangle.Empty;
			this.drawOutline();
			this.drawTarget("app:");
			dest = this.bounds;
			dest.X += 2;
			dest.Width -= 4;
			dest.Height -= Module.PANEL_HEIGHT + 1;
			dest.Y += Module.PANEL_HEIGHT;
			this.drawBackground(dest);
			switch (this.state)
			{
			case SQLExploitExe.SQLState.Intro:
				this.drawIntro(dest);
				break;
			case SQLExploitExe.SQLState.MainIntro:
				this.drawMainIntro(dest);
				break;
			case SQLExploitExe.SQLState.MainBody:
				this.drawMainBody(dest);
				break;
			case SQLExploitExe.SQLState.Ending:
				this.drawEnding(dest);
				break;
			}
		}

		// Token: 0x06000458 RID: 1112 RVA: 0x00045A6D File Offset: 0x00043C6D
		private void drawBackground(Rectangle dest)
		{
			this.spriteBatch.Draw(Utils.gradient, dest, this.os.highlightColor * 0.2f);
		}

		// Token: 0x06000459 RID: 1113 RVA: 0x00045A98 File Offset: 0x00043C98
		private void drawIntro(Rectangle dest)
		{
			this.spriteBatch.DrawString(GuiData.detailfont, this.getDelayDrawString("Initializing###.#.#.#\nConnecting###.#.#.#.#.#.#.#.#..#.\nInjecting Corrupt Sectors###.#.#.##.#.#.#", -1f), new Vector2((float)(dest.X + 2), (float)(dest.Y + 2)), Color.White);
		}

		// Token: 0x0600045A RID: 1114 RVA: 0x00045AE8 File Offset: 0x00043CE8
		private void drawMainIntro(Rectangle dest)
		{
			if (this.currentStateTimer < 0.8f)
			{
				if (this.currentStateTimer % 0.2f < 0.07f)
				{
					PatternDrawer.draw(dest, 3f, this.os.darkBackgroundColor * 0.2f, this.os.lockedColor, this.spriteBatch, PatternDrawer.binaryTile);
				}
				else
				{
					this.spriteBatch.DrawString(GuiData.detailfont, "M3^ORK CO3@PI\"} DGT^C.D\n##Ini$$!l^zi/g SQ: -!re 3@Hp##>#>##>#>#>#>>>>>".Replace("#", ""), new Vector2((float)(dest.X + 2), (float)(dest.Y + 2)), Color.White);
				}
			}
			else
			{
				this.spriteBatch.DrawString(GuiData.detailfont, this.getDelayDrawString("MEMORY CORRUPTION DETECTED\n##Initializing SQL Core Dump##>#>##>#>#>#>>>>>", this.currentStateTimer - 0.8f), new Vector2((float)(dest.X + 2), (float)(dest.Y + 2)), Color.White);
			}
		}

		// Token: 0x0600045B RID: 1115 RVA: 0x00045BF4 File Offset: 0x00043DF4
		private void drawMainBody(Rectangle dest)
		{
			this.spriteBatch.DrawString(GuiData.detailfont, "MEMORY CORRUPTION DETECTED\n##Initializing SQL Core Dump##>#>##>#>#>#>>>>>".Replace("#", ""), new Vector2((float)(dest.X + 2), (float)(dest.Y + 2)), Color.White * this.fade);
			int num = (int)(this.currentStateTimer / 5f * (float)this.bodyText.Length);
			int num2 = dest.Y + 30;
			int num3 = 6;
			int num4 = (dest.Height - 30) / num3;
			int num5 = 0;
			if (num > num4)
			{
				num5 = num - num4;
			}
			Vector2 position = new Vector2((float)(dest.X + 2), (float)num2);
			for (int i = num5; i < num; i++)
			{
				this.spriteBatch.DrawString(GuiData.detailfont, this.bodyText[i], position, Color.White, 0f, Vector2.Zero, 0.5f, SpriteEffects.None, 0.3f);
				position.Y += (float)num3;
			}
		}

		// Token: 0x0600045C RID: 1116 RVA: 0x00045D0C File Offset: 0x00043F0C
		private void drawEnding(Rectangle dest)
		{
			float num = this.currentStateTimer;
			this.currentStateTimer = 5f;
			this.drawMainBody(dest);
			this.currentStateTimer = num;
			Rectangle destinationRectangle = new Rectangle(dest.X, dest.Y + dest.Height / 3, dest.Width, dest.Height / 3);
			this.spriteBatch.Draw(Utils.white, destinationRectangle, this.os.unlockedColor * 0.8f);
			destinationRectangle.Height -= 6;
			destinationRectangle.Y += 3;
			this.spriteBatch.Draw(Utils.white, destinationRectangle, this.os.indentBackgroundColor * 0.8f);
			string text = "UNLOCKED";
			Vector2 vector = GuiData.font.MeasureString(text);
			Vector2 vector2 = new Vector2((float)(destinationRectangle.X + destinationRectangle.Width / 2) - vector.X / 2f, (float)(destinationRectangle.Y + destinationRectangle.Height / 2) - vector.Y / 2f);
			this.spriteBatch.DrawString(GuiData.font, text, vector2 - Vector2.One, this.brightDrawColor * this.fade);
			this.spriteBatch.DrawString(GuiData.font, text, vector2 + Vector2.One, this.brightDrawColor * this.fade);
			this.spriteBatch.DrawString(GuiData.font, text, vector2, Color.White * this.fade);
		}

		// Token: 0x0600045D RID: 1117 RVA: 0x00045EB4 File Offset: 0x000440B4
		private string getDelayDrawString(string original, float time = -1f)
		{
			if (time == -1f)
			{
				time = this.currentStateTimer;
			}
			string text = "";
			float num = 0f;
			for (int i = 0; i < original.Length; i++)
			{
				num += this.initStringCharDelay;
				if (original[i] == '#')
				{
					num += this.initStringCharDelay;
				}
				if (this.currentStateTimer >= num && original[i] != '#')
				{
					text += original[i];
				}
			}
			return text;
		}

		// Token: 0x0600045E RID: 1118 RVA: 0x00045F5C File Offset: 0x0004415C
		public override void Completed()
		{
			base.Completed();
			Computer computer = Programs.getComputer(this.os, this.targetIP);
			if (computer != null)
			{
				computer.openPort(1433, this.os.thisComputer.ip);
			}
		}

		// Token: 0x04000534 RID: 1332
		private const float INTRO_TIME = 3f;

		// Token: 0x04000535 RID: 1333
		private const float MAIN_INTRO_TIME = 3f;

		// Token: 0x04000536 RID: 1334
		private const float MAIN_BODY_TIME = 5f;

		// Token: 0x04000537 RID: 1335
		private const float ENDING_TIME = 1.2f;

		// Token: 0x04000538 RID: 1336
		public const string initText = "Initializing###.#.#.#\nConnecting###.#.#.#.#.#.#.#.#..#.\nInjecting Corrupt Sectors###.#.#.##.#.#.#";

		// Token: 0x04000539 RID: 1337
		public const string mainIntrotext = "MEMORY CORRUPTION DETECTED\n##Initializing SQL Core Dump##>#>##>#>#>#>>>>>";

		// Token: 0x0400053A RID: 1338
		public const string errorIntrotext = "M3^ORK CO3@PI\"} DGT^C.D\n##Ini$$!l^zi/g SQ: -!re 3@Hp##>#>##>#>#>#>>>>>";

		// Token: 0x0400053B RID: 1339
		private string[] bodyText;

		// Token: 0x0400053C RID: 1340
		private SQLExploitExe.SQLState state = SQLExploitExe.SQLState.Intro;

		// Token: 0x0400053D RID: 1341
		private float currentStateTimer = 0f;

		// Token: 0x0400053E RID: 1342
		private float timeTaken = 0f;

		// Token: 0x0400053F RID: 1343
		private float initStringCharDelay = 0.1f;

		// Token: 0x04000540 RID: 1344
		private Color flashColor;

		// Token: 0x04000541 RID: 1345
		private Color brightDrawColor;

		// Token: 0x020000D9 RID: 217
		private enum SQLState
		{
			// Token: 0x04000543 RID: 1347
			Intro,
			// Token: 0x04000544 RID: 1348
			MainIntro,
			// Token: 0x04000545 RID: 1349
			MainBody,
			// Token: 0x04000546 RID: 1350
			Ending
		}
	}
}
